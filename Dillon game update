<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Money Incremental Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
            position: relative;
        }
        #moneyDisplay {
            font-size: 24px;
            margin: 20px 0;
        }
        #rebirthCounter, #superRebirthCounter {
            font-size: 20px;
            margin: 5px 0;
        }
        #costContainer {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            font-size: 18px;
            flex-direction: column;
            align-items: center;
        }
        #rebirthCostDisplay, #superRebirthCostDisplay {
            margin: 5px 0;
        }
        #startButton, #upgradesButton, #rebirthButton, #superRebirthButton, #autoBuyAllButton {
            margin: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
        #upgradesContainer {
            display: none;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #cccccc;
            margin-top: 20px;
            padding: 10px;
        }
        /* Star styles */
        .star {
            position: absolute;
            width: 10px;
            height: 10px;
            background-color: yellow;
            border-radius: 50%;
            opacity: 1;
            pointer-events: none;
            animation: spin 1s ease forwards, disappear 1s ease forwards;
        }

        @keyframes spin {
            0% {
                transform: translateY(0) rotate(0deg);
                opacity: 1;
            }
            50% {
                opacity: 1;
            }
            100% {
                transform: translateY(-150px) rotate(720deg);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <h1 id="gameTitle">Money Incremental Game</h1>
    <div id="moneyDisplay">$0.00</div>

    <div id="rebirthCounter">Rebirths: 0</div>
    <div id="superRebirthCounter">Super Rebirths: 0</div>

    <div id="costContainer">
        <div id="rebirthCostDisplay">Rebirth Cost: $1,000,000</div>
        <div id="superRebirthCostDisplay">Super Rebirth Cost: 5 Rebirths</div>
    </div>

    <button id="startButton">Start Game</button>
    <button id="upgradesButton">Toggle Upgrades</button>
    <button id="rebirthButton" style="display: none;">Rebirth</button>
    <button id="superRebirthButton" style="display: none;">Super Rebirth</button>
    <button id="autoBuyAllButton" style="display: none;">Auto Buy All</button>

    <div id="upgradesContainer">
        <h2>Upgrades</h2>
        <div id="upgradeList"></div>
    </div>

    <script>
        let money = 0;
        let earningInterval;
        let totalIncrement = 0;
        let rebirthCount = 0;
        let superRebirthCount = 0;
        let baseEarningRate = 1;
        let upgrades = [];
        let rebirthMultiplier = 1;
        let rebirthCost = 1000000;
        let superRebirthCost = 5; // Initial cost of super rebirth (as a count of rebirths)
        // This will be a multiplier for how many rebirths are needed for a super rebirth
        let superRebirthRequired = 5;

        const moneyDisplay = document.getElementById("moneyDisplay");
        const rebirthCounterDisplay = document.getElementById("rebirthCounter");
        const superRebirthCounterDisplay = document.getElementById("superRebirthCounter");
        const rebirthCostDisplay = document.getElementById("rebirthCostDisplay");
        const superRebirthCostDisplay = document.getElementById("superRebirthCostDisplay");
        const startButton = document.getElementById("startButton");
        const upgradesContainer = document.getElementById("upgradesContainer");
        const upgradesButton = document.getElementById("upgradesButton");
        const upgradeList = document.getElementById("upgradeList");
        const rebirthButton = document.getElementById("rebirthButton");
        const superRebirthButton = document.getElementById("superRebirthButton");
        const autoBuyAllButton = document.getElementById("autoBuyAllButton");

        const baseCost = 20;

        const upgradeConfig = [
            { name: "Basic Upgrade", cost: baseCost },
            // Add more upgrades if needed
        ];

        function startGame() {
            startButton.style.display = 'none';
            upgradesButton.style.display = 'block';
            autoBuyAllButton.style.display = 'block';

            money = 0;
            totalIncrement = 0;
            rebirthCount = 0;
            superRebirthCount = 0; // Reset super rebirth count
            updateSuperRebirthCount();
            startEarningMoney();
            initializeUpgrades();
            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
            updateCostDisplays();
        }

        function startEarningMoney() {
            earningInterval = setInterval(() => {
                let totalEarningsPerSec = baseEarningRate + totalIncrement;
                money += totalEarningsPerSec;
                updateMoneyDisplay();
                checkAutomaticUpgrades();
            }, 1000);
        }

        function initializeUpgrades() {
            upgrades = [];
            upgradeConfig.forEach(upgrade => createUpgrade(upgrade.name, upgrade.cost));
        }

        function createUpgrade(name, cost) {
            const upgrade = {
                name: name,
                cost: cost,
                originalCost: cost,
                increment: calculateIncrement(cost),
                purchased: 0,
                autoBuy: false
            };

            upgrades.push(upgrade);
            renderUpgrades();
        }

        function calculateIncrement(cost) {
            return Math.floor(cost * 0.15);
        }

        function renderUpgrades() {
            upgradeList.innerHTML = '';
            upgrades.forEach((upgrade, index) => {
                const upgradeDiv = document.createElement("div");
                upgradeDiv.className = "upgrade";
                upgradeDiv.innerHTML = `${upgrade.name}: +$${upgrade.increment.toFixed(2)}/s (Cost: ${formatMoney(upgrade.cost)}) 
                                        <button onclick="buyUpgrade(${index})">Buy</button> 
                                        <label>
                                            <input type="checkbox" 
                                                   onchange="toggleAutoBuy(${index})" 
                                                   ${upgrade.autoBuy ? 'checked' : ''} 
                                            /> Auto-buy
                                        </label>
                                        <span> (Purchased: ${upgrade.purchased})`;
                upgradeList.appendChild(upgradeDiv);
            });
        }

        function buyUpgrade(index) {
            const upgrade = upgrades[index];
            if (money >= upgrade.cost) {
                money -= upgrade.cost;
                upgrade.purchased += 1;
                totalIncrement += upgrade.increment;
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                updateMoneyDisplay();
                renderUpgrades();
            } else {
                alert("Not enough money to buy this upgrade.");
            }

            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
        }

        function toggleAutoBuy(index) {
            upgrades[index].autoBuy = !upgrades[index].autoBuy;
            if (upgrades[index].autoBuy) {
                checkAutomaticUpgrades();
            }
        }

        function checkAutomaticUpgrades() {
            upgrades.forEach((upgrade) => {
                if (upgrade.autoBuy && money >= upgrade.cost) {
                    buyUpgrade(upgrades.indexOf(upgrade));
                }
            });
        }

        upgradesButton.addEventListener("click", () => {
            upgradesContainer.style.display = 
                upgradesContainer.style.display === 'none' || upgradesContainer.style.display === '' ? 
                'block' : 
                'none';
        });

        function formatMoney(value) {
            return '$' + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function updateMoneyDisplay() {
            moneyDisplay.innerHTML = formatMoney(money);
            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
            updateCostDisplays();
        }

        function updateRebirthButtonVisibility() {
            if (money >= rebirthCost) {
                rebirthButton.style.display = 'block';
            } else {
                rebirthButton.style.display = 'none';
            }
        }

        function updateSuperRebirthButtonVisibility() {
            // Show if we have enough rebirths
            if (rebirthCount >= superRebirthRequired) {
                superRebirthButton.style.display = 'block';
            } else {
                superRebirthButton.style.display = 'none';
            }
        }

        function createStars() {
            for (let i = 0; i < 20; i++) {
                const star = document.createElement("div");
                star.className = "star";
                star.style.left = Math.random() * window.innerWidth + "px";
                star.style.top = Math.random() * window.innerHeight + "px";
                document.body.appendChild(star);

                setTimeout(() => {
                    star.remove();
                }, 2000);
            }
        }

        rebirthButton.addEventListener("click", () => {
            rebirthCount += rebirthMultiplier;
            rebirthCounterDisplay.innerHTML = `Rebirths: ${rebirthCount}`;
            createStars();

            money = 0;
            totalIncrement = 0;
            upgrades.forEach(upgrade => {
                upgrade.increment *= 2; 
                upgrade.cost = upgrade.originalCost; 
            });
            upgradeList.innerHTML = '';
            updateMoneyDisplay();
            clearInterval(earningInterval);
            baseEarningRate *= 2;
            startEarningMoney();
            rebirthCost *= 2;
            updateCostDisplays();
        });

        superRebirthButton.addEventListener("click", () => {
            if (rebirthCount >= superRebirthRequired) {
                superRebirthCount++;
                updateSuperRebirthCount(); // Update display for super rebirths
                createStars();

                // Reset money and totalIncrement
                money = 0;
                totalIncrement = 0;

                // Reset the upgrades
                upgrades.forEach(upgrade => {
                    upgrade.increment *= 10; // Increase increment significantly on super rebirth
                    upgrade.cost = upgrade.originalCost; // Resetting cost to original
                });
                upgradeList.innerHTML = ''; 
                updateMoneyDisplay();
                clearInterval(earningInterval);
                rebirthCount = 0; 
                rebirthMultiplier *= 2; 
                rebirthCounterDisplay.innerHTML = `Rebirths: ${rebirthCount}`;
                baseEarningRate *= 10;

                // Adjust the super rebirth cost based on current super rebirth count
                superRebirthRequired *= 2; // Double the requirement for the next super rebirth
                updateCostDisplays(); // Update cost displays after super rebirth
            } else {
                alert(`You need ${superRebirthRequired} rebirths to perform a super rebirth.`);
            }
        });

        autoBuyAllButton.addEventListener("click", () => {
            const allAutoBuy = upgrades.every(upgrade => upgrade.autoBuy);
            upgrades.forEach(upgrade => {
                upgrade.autoBuy = !allAutoBuy; 
                if (upgrade.autoBuy) {
                    checkAutomaticUpgrades();
                }
            });
            renderUpgrades(); 
        });

        function updateSuperRebirthCount() {
            superRebirthCounterDisplay.innerHTML = `Super Rebirths: ${superRebirthCount}`;
        }

        function updateCostDisplays() {
            rebirthCostDisplay.innerHTML = `Rebirth Cost: ${formatMoney(rebirthCost)}`;
            superRebirthCostDisplay.innerHTML = `Super Rebirth Cost: ${superRebirthRequired} Rebirths`; // Updated display
        }

        startButton.addEventListener("click", startGame);
        updateMoneyDisplay();
    </script>
</body>
</html>
