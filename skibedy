<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Money Incremental Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px;
        }
        #moneyDisplay {
            font-size: 24px;
            margin: 20px 0;
        }
        #earningsDisplay {
            font-size: 20px; 
            color: green;
            margin: 10px 0; 
        }
        #rebirthCounter, #superRebirthCounter {
            font-size: 20px;
            margin: 5px 0;
        }
        #costContainer {
            display: flex;
            justify-content: center;
            margin: 20px 0;
            font-size: 18px;
            flex-direction: column;
            align-items: center;
        }
        #rebirthCostDisplay, #superRebirthCostDisplay {
            margin: 5px 0;
        }
        #startButton, #upgradesButton, #rebirthButton, #superRebirthButton, #autoBuyAllButton {
            margin: 10px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
        #upgradesContainer {
            display: none;
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #cccccc;
            margin-top: 20px;
            padding: 10px;
        }
    </style>
</head>
<body>
    <h1 id="gameTitle">Money Incremental Game</h1>
    <div id="earningsDisplay">Earnings: $0.00/s</div>
    <div id="moneyDisplay">$0.00</div>

    <div id="rebirthCounter">Rebirths: 0</div>
    <div id="superRebirthCounter">Super Rebirths: 0</div>

    <div id="costContainer">
        <div id="rebirthCostDisplay">Rebirth Cost: $1,000,000</div>
        <div id="superRebirthCostDisplay">Super Rebirth Cost: 5 Rebirths</div>
    </div>

    <button id="startButton">Start Game</button>
    <button id="upgradesButton">Toggle Upgrades</button>
    <button id="rebirthButton" style="display: none;">Rebirth</button>
    <button id="superRebirthButton" style="display: none;">Super Rebirth</button>
    <button id="autoBuyAllButton" style="display: none;">Auto Buy All</button>

    <div id="upgradesContainer">
        <h2>Upgrades</h2>
        <div id="upgradeList"></div>
    </div>

    <script>
        let money = 0;
        let earningInterval;
        let totalIncrement = 0; // Total increment from upgrades
        let rebirthCount = 0;
        let superRebirthCount = 0; // Tracks the number of super rebirths
        let rebirthCost = 1000000; // Cost of rebirth
        let superRebirthRequired = 5; // Initial requirement for super rebirths
        let baseEarningRate = 1; // Base earning rate per second

        const moneyDisplay = document.getElementById("moneyDisplay");
        const earningsDisplay = document.getElementById("earningsDisplay");
        const rebirthCounterDisplay = document.getElementById("rebirthCounter");
        const superRebirthCounterDisplay = document.getElementById("superRebirthCounter");
        const rebirthCostDisplay = document.getElementById("rebirthCostDisplay");
        const superRebirthCostDisplay = document.getElementById("superRebirthCostDisplay");
        const startButton = document.getElementById("startButton");
        const upgradesContainer = document.getElementById("upgradesContainer");
        const upgradesButton = document.getElementById("upgradesButton");
        const upgradeList = document.getElementById("upgradeList");
        const rebirthButton = document.getElementById("rebirthButton");
        const superRebirthButton = document.getElementById("superRebirthButton");
        const autoBuyAllButton = document.getElementById("autoBuyAllButton");

        // Full list of upgrade configuration restored
        const upgradeConfig = [
            { name: "Basic Upgrade", cost: 20 },
            { name: "Advanced Upgrade", cost: 60 },
            { name: "Pro Upgrade", cost: 120 },
            { name: "Mega Upgrade", cost: 200 },
            { name: "Ultimate Upgrade", cost: 300 },
            { name: "Super Upgrade", cost: 400 },
            { name: "Titan Upgrade", cost: 540 },
            { name: "Legendary Upgrade", cost: 700 },
            { name: "Mythic Upgrade", cost: 900 },
            { name: "Godly Upgrade", cost: 1200 },
            { name: "Transcendent Upgrade", cost: 1600 },
            { name: "Divine Upgrade", cost: 2100 },
            { name: "Wealthy Upgrade", cost: 2700 },
            { name: "Rich Upgrade", cost: 3500 },
            { name: "Affluent Upgrade", cost: 4500 },
            { name: "Lavish Upgrade", cost: 6000 },
            { name: "Opulent Upgrade", cost: 8000 },
            { name: "Golden Upgrade", cost: 10000 },
            { name: "Platinum Upgrade", cost: 13000 },
            { name: "Diamond Upgrade", cost: 16000 },
            { name: "Emerald Upgrade", cost: 21000 },
            { name: "Mystic Upgrade", cost: 26000 },
            { name: "Galactic Upgrade", cost: 32000 },
            { name: "Cosmic Upgrade", cost: 39000 },
            { name: "Infinite Upgrade", cost: 48000 },
            { name: "Chrono Upgrade", cost: 60000 },
            { name: "Elysium Upgrade", cost: 75000 },
            { name: "Astral Upgrade", cost: 90000 },
            { name: "Quantum Upgrade", cost: 110000 },
            { name: "Multiverse Upgrade", cost: 130000 },
            { name: "Temporal Upgrade", cost: 160000 },
            { name: "Divinity Upgrade", cost: 200000 },
            { name: "Celestial Upgrade", cost: 250000 },
            { name: "Nebula Upgrade", cost: 300000 },
            { name: "Stellar Upgrade", cost: 360000 },
            { name: "Supernova Upgrade", cost: 430000 },
            { name: "Cosmic Expansion Upgrade", cost: 510000 }
        ];

        function startGame() {
            startButton.style.display = 'none';
            upgradesButton.style.display = 'block';
            autoBuyAllButton.style.display = 'block';

            // Reset game variables
            money = 0;
            totalIncrement = 0;
            rebirthCount = 0;
            superRebirthCount = 0; // Reset super rebirth count
            baseEarningRate = 1; // Reset base earning rate
            rebirthCost = 1000000; // Reset rebirth cost
            startEarningMoney();
            initializeUpgrades();
            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
            updateCostDisplays();
        }

        function startEarningMoney() {
            earningInterval = setInterval(() => {
                let totalEarningsPerSec = baseEarningRate + totalIncrement;
                money += totalEarningsPerSec;

                updateMoneyDisplay();
                updateEarningsDisplay(totalEarningsPerSec);
                checkAutomaticUpgrades();
            }, 1000);
        }

        function updateEarningsDisplay(totalEarningsPerSec) {
            earningsDisplay.innerHTML = `Earnings: $${totalEarningsPerSec.toFixed(2)}/s`;
        }

        function initializeUpgrades() {
            upgrades = [];
            upgradeConfig.forEach(upgrade => createUpgrade(upgrade.name, upgrade.cost));
        }

        function createUpgrade(name, cost) {
            const upgrade = {
                name: name,
                cost: cost,
                originalCost: cost,
                increment: calculateIncrement(cost),
                purchased: 0,
                autoBuy: false
            };
            upgrades.push(upgrade);
            renderUpgrades();
        }

        function calculateIncrement(cost) {
            return Math.floor(cost * 0.10); // 10% of the cost for each upgrade
        }

        function renderUpgrades() {
            upgradeList.innerHTML = '';
            upgrades.forEach((upgrade, index) => {
                const upgradeDiv = document.createElement("div");
                upgradeDiv.className = "upgrade";
                upgradeDiv.innerHTML = `${upgrade.name}: +$${(upgrade.increment).toFixed(2)}/s (Cost: ${upgrade.cost}): 
                                        <button onclick="buyUpgrade(${index})">Buy</button> 
                                        <label>
                                            <input type="checkbox" onchange="toggleAutoBuy(${index})" ${upgrade.autoBuy ? 'checked' : ''} /> Auto-buy
                                        </label>
                                        <span> (Purchased: ${upgrade.purchased})`;
                upgradeList.appendChild(upgradeDiv);
            });
        }

        function buyUpgrade(index) {
            const upgrade = upgrades[index];
            if (money >= upgrade.cost) {
                money -= upgrade.cost;
                upgrade.purchased += 1;
                totalIncrement += upgrade.increment;

                // Increase the cost for the next purchase
                upgrade.cost = Math.floor(upgrade.cost * 1.5);
                
                updateMoneyDisplay();
                renderUpgrades();
            } else {
                alert("Not enough money to buy this upgrade.");
            }

            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
        }

        function toggleAutoBuy(index) {
            upgrades[index].autoBuy = !upgrades[index].autoBuy;
            if (upgrades[index].autoBuy) {
                checkAutomaticUpgrades();
            }
        }

        function checkAutomaticUpgrades() {
            upgrades.forEach((upgrade) => {
                if (upgrade.autoBuy && money >= upgrade.cost) {
                    buyUpgrade(upgrades.indexOf(upgrade));
                }
            });
        }

        upgradesButton.addEventListener("click", () => {
            upgradesContainer.style.display = 
                upgradesContainer.style.display === 'none' || upgradesContainer.style.display === '' ? 
                'block' : 
                'none';
        });

        function formatMoney(value) {
            return '$' + value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }

        function updateMoneyDisplay() {
            moneyDisplay.innerHTML = formatMoney(money);
            updateRebirthButtonVisibility();
            updateSuperRebirthButtonVisibility();
            updateCostDisplays();
        }

        function updateRebirthButtonVisibility() {
            rebirthButton.style.display = money >= rebirthCost ? 'block' : 'none';
        }

        function updateSuperRebirthButtonVisibility() {
            superRebirthButton.style.display = rebirthCount >= superRebirthRequired ? 'block' : 'none';
        }

        rebirthButton.addEventListener("click", () => {
            rebirthCount++; 
            rebirthCounterDisplay.innerHTML = `Rebirths: ${rebirthCount}`;
            money = 0;
            totalIncrement = 0;

            // Reset upgrades
            upgrades.forEach(upgrade => {
                upgrade.cost = upgrade.originalCost; 
                upgrade.purchased = 0; 
            });

            clearInterval(earningInterval);
            baseEarningRate *= 2; // Double base earning rate for next run
            startEarningMoney();
            rebirthCost *= 2; // Increase rebirth cost
            updateCostDisplays();
            renderUpgrades();
        });

        superRebirthButton.addEventListener("click", () => {
            if (rebirthCount >= superRebirthRequired) {
                superRebirthCount++;
                superRebirthCounterDisplay.innerHTML = `Super Rebirths: ${superRebirthCount}`;

                // Reset for super rebirth
                money = 0; 
                totalIncrement = 0; 
                baseEarningRate = 1; 

                // Reset all upgrades
                upgrades.forEach(upgrade => {
                    upgrade.cost = upgrade.originalCost; 
                    upgrade.purchased = 0; 
                });

                clearInterval(earningInterval);
                rebirthCount = 0; 
                rebirthCounterDisplay.innerHTML = `Rebirths: ${rebirthCount}`;
                superRebirthRequired *= 2; // Double the requirement for the next super rebirth
                updateCostDisplays(); 
                renderUpgrades(); 
                startEarningMoney(); 
            } else {
                alert(`You need ${superRebirthRequired} rebirths to perform a super rebirth.`);
            }
        });

        autoBuyAllButton.addEventListener("click", () => {
            const allAutoBuy = upgrades.every(upgrade => upgrade.autoBuy);
            upgrades.forEach(upgrade => {
                upgrade.autoBuy = !allAutoBuy;
                if (upgrade.autoBuy) {
                    checkAutomaticUpgrades();
                }
            });
            renderUpgrades();
        });

        function updateCostDisplays() {
            rebirthCostDisplay.innerHTML = `Rebirth Cost: ${formatMoney(rebirthCost)}`;
            superRebirthCostDisplay.innerHTML = `Super Rebirth Cost: ${superRebirthRequired} Rebirths`;
        }

        startButton.addEventListener("click", startGame);
        updateMoneyDisplay();
    </script>
</body>
</html>
